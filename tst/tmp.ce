data String:
    Str0
    StrN ({char},String)

data Tokens:
    Tok0
    TokN ({char},Tokens)

func toString :: ({char*} -> String[]):
    val buf :: {char*} = ...
    if:
        {buf[0] == '\0'} -> new Str0
        else             -> new StrN({buf[0]}, toString({buf+1}))

func toTokens :: (String -> Tokens[]):
    val cur :: String[] = new Str0
    return aux(...,cur)
where:
    func aux :: ((String,String) -> Tokens[]):
        val (buf,cur) :: (String,String) = ...
        match buf:
            Str0 -> Tok0
            StrN(c,cs) :: ({char},String) -> TokN(c, aux(cs,cur))

func t_lexer :: (() -> ()):
    :
        val str :: String[] = new toString({"-- foobar"})
        val tks :: Tokens[] = new toTokens(str)
        {show_Tokens}(tks)

:
    t_lexer ()

{ puts("OK") }
