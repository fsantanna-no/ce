{ #include <string.h> }
{ #include <ctype.h> }
{ typedef struct { char v[256]; } String }

data Bool:
    False
    True

func to_bool :: ({int} -> Bool):
    match ...:
        {0}  -> False
        else -> True

data Tk:        -- TODO: inheritance // optional | \n
    Tk_ERR
    Tk_CHAR     {char}
    Tk_EOF
    Tk_LINE     {int}
    Tk_COMMENT
    Tk_RAW
    Tk_DECL
    Tk_ARROW
    Tk_IDVAR    {String}
    Tk_IDDATA   {String}
    Tk_LET

data Keywords
data Keywords:
    Key_NIL
    Key_CNS ({String},Tk,Keywords)

data Maybe_Key:
    Key_Nothing
    Key_Just Tk

data Type:
    TRaw    Tk
    TUnit

data Maybe_Type:
    Type_Nothing
    Type_Just Type

data State_Tok:
    State_Tok ({long},{long},{long},Tk)

val keys :: Keywords = new Key_CNS ({(String){"let"}},Tk_LET,new Key_NIL)
mut out  :: {FILE*}
mut inp  :: {FILE*}
mut tok0 :: State_Tok = State_Tok ({-1},{0},{0},Tk_ERR)
mut tok1 :: State_Tok = State_Tok ({-1},{1},{1},Tk_ERR)
mut tok2 :: State_Tok = State_Tok ({-1},{1},{1},Tk_ERR)

func reserved_ :: ((Keywords,{String}) -> Maybe_Key):
    val (keys,key) :: (Keywords,{String}) = ...
    match keys:
        Key_NIL -> Key_Nothing
        Key_CNS (str,tk,l) :: ({String},Tk,Keywords):
            if:
                {!strcmp(key.v,str.v)} -> Key_Just(tk)
                else -> reserved_ (l,key)

func lexer_ :: (() -> Tk):
    match {fgetc} (inp):
        {EOF}  -> Tk_EOF
        {'('}  -> Tk_CHAR ({'('})
        {')'}  -> Tk_CHAR ({')'})
        {'\n'} -> :
            val i :: {int} = {0}
            loop:                               -- TODO: loop i
                match {fgetc} (inp):
                    {EOF} -> return Tk_EOF      -- consider \nEOF as EOF
                    {' '} -> set i = {i+1}
                    c :: {int}:
                        {ungetc} (c,inp)
                        break ()
            if:
                {i%4 == 0} -> return Tk_LINE ({i/4})
                else       -> return Tk_ERR
        {'-'}:
            match {fgetc} (inp):
                {'>'} -> return Tk_ARROW
                {'-'} -> :
                    loop:
                        match {fgetc} (inp):
                            {EOF}:
                                {ungetc} ({EOF},inp)
                                return Tk_COMMENT
                            {'\n'}:                     -- TODO `;` for seq
                                {ungetc} ({'\n'},inp)
                                return Tk_COMMENT
                            else -> pass
                else  -> return Tk_ERR
        {':'}:
            match {fgetc} (inp):
                {':'} -> return Tk_DECL
                c :: {int}:
                    {ungetc} (c,inp)
                    return Tk_CHAR ({':'})
        c :: {int}:
            mut i   :: {int}    = {0}
            mut ret :: {String} = {(String){""}}
            return Tk_ERR if {!isalpha (c)}
            loop:
                break () if {!(isalnum(c) || c=='_' || c=='\'' || c=='?' || c=='!')}
                {ret.v[i] = c}
                set i = {i+1}
                set c = {fgetc} (inp)
            {ret.v[i] = '\0'}
            {ungetc} (c,inp)
            match reserved_(keys,ret):
                Key_Nothing:
                    if {islower (ret.v[0])} -> Tk_IDVAR (ret) -> Tk_IDDATA (ret)
                Key_Just(tk) :: Tk -> tk

func lexer :: (() -> Tk):
    val tk :: Tk = lexer_()
    loop:
        match {fgetc} (inp):
            {' '} -> pass
            c :: {int}:
                {ungetc} (c,inp)
                break ()
    {show_Tk}(tk)
    return tk

func stropen :: (({char*},{size_t},{char*}) -> {FILE*}): -- TODO: (mode::char*, ...)
    val (mode,size,str) :: ({char*},{size_t},{char*}) = ...
    set size = match size:
        {0}  -> {strlen} (str)
        else -> size
    { fmemopen (str,size,mode) }

func pr_read :: (State_Tok -> State_Tok):
    mut off :: {long} = {ftell}(inp)
    mut tk  :: Tk     = lexer()
    {printf("pr_read %d\n", tk.sub)}

    -- skip comment
    match tk:
        Tk_COMMENT:
            set off = {ftell}(inp)
            set tk  = lexer()

    return State_Tok (off,lin,col,tk) where:
        val State_Tok (_,lin,col,_) :: ({long},{long}) = ...

func pr_lincol :: (() -> ()):
    match tok1:
        State_Tok (_,_,_,Tk_CHAR({'\n'})):
            {tok2._State_Tok._1 = tok1._State_Tok._1 + 1}
            {tok2._State_Tok._2 = tok2._State_Tok._0 - tok1._State_Tok._0}
        else:
            {tok2._State_Tok._2 = tok1._State_Tok._2 + (tok2._State_Tok._0 - tok1._State_Tok._0)}

func pr_init :: (() -> ()):
    set tok0 = State_Tok ({-1},{0},{0},Tk_ERR)
    set tok1 = State_Tok ({-1},{1},{1},Tk_ERR)
    set tok2 = State_Tok ({-1},{1},{1},Tk_ERR)
    set tok1 = pr_read(tok1)
    set tok2 = pr_read(tok2)
    pr_lincol()
    {puts("init")}

func pr_next :: (() -> ()):
    set tok0 = tok1
    set tok1 = tok2
    set tok2 = tok2
    pr_lincol()

func pr_accept1 :: (Tk -> {int}):
    {printf("pr_accept %d\n", tok1._State_Tok._3.sub)}
    val tk :: Tk = ...
    val ok :: {int} = match ({tok1._State_Tok._3},...):
        (Tk_CHAR(c1), Tk_CHAR(c2)) :: ({char},{char}) -> {puts("ok") ; c1 == c2}
        else -> {tok1._State_Tok._3.sub == tk.sub}
    if:
        {ok}:
            pr_next()
            return {1}
        else:
            {puts("okokok")}
            return {0}

func init :: (({FILE*},{FILE*}) -> ()):
    set (out,inp) = ...
    pr_init () if {inp != NULL}

func parser_type :: (() -> Maybe_Type):
    if:
    -- TRaw
        pr_accept1(Tk_RAW) -> Type_Just (TRaw ({tok0._State_Tok._3}))
    -- TUnit
        pr_accept1(Tk_CHAR({'('})) -> if:
            pr_accept1(Tk_CHAR({')'})) -> Type_Just (TUnit)
            else                       -> parser_type ()
    -- ERROR
        else -> Type_Nothing

func t_lexer :: (() -> ()):
    :
        set inp = stropen ({"r"}, {0}, {"-- foobar"})
        {assert} (lexer() ~ Tk_COMMENT)
        {fclose} (inp)
    :
        set inp = stropen({"r"}, {0}, {"-- c1\n--c2\n\n"})
        {assert} (lexer() ~ Tk_COMMENT)
        {assert} (lexer() ~ Tk_LINE)
        {assert} (lexer() ~ Tk_COMMENT)
        {assert} (lexer() ~ Tk_LINE)
        {assert} (lexer() ~ Tk_EOF)
        {fclose} (inp)
    :
        set inp = stropen({"r"}, {0}, {"\n  \n"})
        {assert} (lexer() ~ Tk_ERR)
        {assert} (lexer() ~ Tk_EOF)
        {fclose} (inp)
    :
        set inp = stropen({"r"}, {0}, {"c1\nc2 c3'  \n    \nc4"})
        {assert (! strcmp (s.v,"c1"))} where:
            val Tk_IDVAR (s) :: {String} = lexer()
        {assert} (lexer() ~ Tk_LINE)
        {assert (! strcmp (s.v,"c2"))} where:
            val Tk_IDVAR (s) :: {String} = lexer()
        {assert (! strcmp (s.v,"c3'"))} where:
            val Tk_IDVAR (s) :: {String} = lexer()
        {fclose} (inp)
    :
        set inp = stropen({"r"}, {0}, {"c1 C1 C'a a'? C!!"})
        {assert (! strcmp (s.v,"c1"))} where:
            val Tk_IDVAR  (s) :: {String} = lexer()
        {assert (! strcmp (s.v,"C1"))} where:
            val Tk_IDDATA (s) :: {String} = lexer()
        {assert (! strcmp (s.v,"C'a"))} where:
            val Tk_IDDATA (s) :: {String} = lexer()
        {assert (! strcmp (s.v,"a'?"))} where:
            val Tk_IDVAR  (s) :: {String} = lexer()
        {assert (! strcmp (s.v,"C!!"))} where:
            val Tk_IDDATA (s) :: {String} = lexer()
        {assert} (lexer() ~ Tk_EOF)
        {fclose} (inp)
    :
        set inp = stropen({"r"}, {0}, {"let xlet letx"})
        {assert} (lexer() ~ Tk_LET)
        {assert (! strcmp (s.v,"xlet"))} where:
            val Tk_IDVAR (s) :: {String} = lexer()
        {assert (! strcmp (s.v,"letx"))} where:
            val Tk_IDVAR (s) :: {String} = lexer()
        {assert} (lexer() ~ Tk_EOF)
        {fclose} (inp)
    :
        set inp = stropen({"r"}, {0}, {": :: :"})
        --{assert} (lexer() ~ Tk_CHAR({':'}))       -- TODO: lexer() twice
        {assert} (tk ~ Tk_CHAR({':'})) where:
            val tk :: Tk = lexer()
        {assert} (lexer() ~ Tk_DECL)
        {assert} (tk ~ Tk_CHAR({':'})) where:
            val tk :: Tk = lexer()
        {fclose} (inp)

func t_type :: (() -> ()):
    init ({NULL}, stropen({"r"}, {0}, {"()"}))
    {assert} (parser_type() ~ TUnit)
    {fclose} (inp)

:
    --t_lexer ()
    t_type  ()

{ puts("OK") }
