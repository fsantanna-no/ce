{ #include <string.h> }
{ typedef char Tk_s[256] }

data Tk:        -- TODO: inheritance // optional | \n
    Tk_ERR
    Tk_EOF
    Tk_COMMENT
    Tk_ARROW

mut inp :: {FILE*}

func lexer :: (() -> Tk):
    { puts("OK") }
    case {fgetc} (inp):
        {EOF} -> Tk_EOF
        {'-'} -> :
            case {fgetc} (inp):
                {'>'} -> return Tk_ARROW
                {'-'} -> :
                    loop:
                        case {fgetc} (inp):
                            {EOF}:
                                call {ungetc} ({EOF},inp)
                                break
                            {'\n'}:                     -- TODO `;` for seq
                                call {ungetc} ({'\n'},inp)
                                break
                            else -> ()
                        return Tk_COMMENT
                else  -> return Tk_ERR
    { assert(0 && "bug found") }

func stropen :: (({char*}, {size_t}, {char*}) -> {FILE*}): -- TODO: (mode::char*, ...)
    let (mode,size,str) :: ({char*}, {size_t}, {char*}) = ...:
        set size = case size:
            {0}  -> {strlen} (str)
            else -> size
        { fmemopen (str,size,mode) }

func t_lexer :: (() -> ()):
    :
        set inp = stropen ({"r"}, {0}, {"-- foobar"})
        let tk :: Tk = lexer():             -- TODO: it // optional [tk :: Tk =] (assume it)
            call {assert} (tk ~ Tk_COMMENT (_))

call t_lexer ()

{ puts("OK") }
