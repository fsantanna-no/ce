{ typedef char Tk_s[256] }

--data Tk ({int},{Tk_s}):     -- TODO: inheritance
--    Tk_ERR ()               -- TODO: optional ()
--                            -- TODO: |

data Tk:
    Tk_ERR ({int},{Tk_s})

mut inp :: {char*}

set stropen = func :: ({char*}, {size_t}, {char*}) -> {FILE*}: -- TODO: (mode::char*, ...)
    let (mode,size,str) :: ({char*}, {size_t}, {char*}) = ...:
        set size = case size:
            {0}  -> strlen (str)
            else -> size
        call fmemopen (str,size,mode)

set t_lexer = func :: () -> ():             -- TODO: func t_lexer ::
    :
        set inp = {stropen ("r", 0, "-- foobar")}
        let tk :: Tk = lexer():             -- TODO: optional [tk :: Tk =] (assume it)
            call assert (ok) where:
                val ok :: {int} = case tk:  -- TODO: is / matches
                    Tk_COMMENT (_) -> {1}
                    else           -> {0}

call t_lexer ()
