data Chars:
    NilC  ()
    ConsC ({char},Chars)

data Token:
    KUnit
    KChar {char}
    KData Chars

data Type
data Type:
    TUnit
    TData Chars
    TPair (Type,Type)

data Tokens
data Tokens:
    NilK  ()
    ConsK (Token,Tokens)

data Types
data Types:
    NilT  ()
    ConsT ({char},Types)

-------------------------------------------------------------------------------

func c2Chars :: ({char*} -> Chars):
    val buf :: {char*} = ...
    if:
        {buf[0] == '\0'} -> new NilC
        else             -> new ConsC({buf[0]}, c2Chars({buf+1}))

{show_Chars}(c2Chars({"((),(Int,()))"}))

-- ((),Int,(Int,()))
val inp :: Chars = c2Chars({})


func lexer :: (Chars -> Tokens):
    lexer'(...,NilC) where:
        func lexer' :: ((Chars,Chars) -> Tokens):
            val (inp,out) :: (Chars,Chars) = ...
            match inp:
                NilC -> EOF
                ConsC (c,l):
                    match c:


    match ...:
        NilC -> NilT

        {EOF}  -> Tk_EOF
        {'('}  -> Tk_CHAR ({'('})
        {')'}  -> Tk_CHAR ({')'})
        {'\n'}:
            val i :: {int} = {0}
            loop:                               -- TODO: loop i
                match {fgetc} (inp):
                    {EOF} -> return Tk_EOF      -- consider \nEOF as EOF
                    {' '} -> set i = {i+1}
                    c :: {int}:
                        {ungetc} (c,inp)
                        break ()
            if:
                {i%4 == 0} -> return Tk_LINE ({i/4})
                else       -> return Tk_ERR

data L

-- ((),Int,(Int,()))

:
    val lst :: List = new Cons(new Cons(new Cons(new Nil)))
    call show (lst1.Cons._1, lst1.Cons._2 is Nil?)
        -- 10, True
    -- deallocs lst1

-- fail memory
:
    val[1] lst1 :: List = new Cons (10, Cons (20, Cons (30, Nil)))
    call show (lst1.Cons._1, lst1.Cons._2 is Nil?)
        -- 10, True
    -- deallocs lst1

-- release memory
:
    val[] lst2 :: List = new Cons (10, cons (20, Cons (30, Nil)))
    set lst2.Cons._2 = Cons (50, Nil)
    call show (lst2.Cons._2.Cons._1)
        -- 50, deallocs 20,30

-- traverse
:
    val[] lst2 :: List = new <...>

    -- recursive function
    val sum = func :: List -> Int :
        case ...:
            Nil        -> 0
            Cons (n,l) -> n + sum (l)
    val x = sum (lst3)

    -- recursive traverse
    val x = traverse e in lst3:
        Nil        -> 0
        Cons (n,l) -> n + traverse l

ref[5] l = new Cons((),Cons((),Cons((),Nil)))

set List(l1,_) [:: ref List] = l
set List(l1,_) = l

set l1 [:: ref List] = case l:
    List (=x,_) [:: ref List] -> x

ref l1 :: ref List = 

var n = case l:
    List(=x,_) -> x

call show(n)
