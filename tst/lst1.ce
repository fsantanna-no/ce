data Chars
data Chars:
    NilC  ()
    ConsC ({char},Chars)

func c2Chars :: ({char*} -> Chars):
    val buf :: {char*} = ...
    if:
        {buf[0] == '\0'} -> new NilC
        else             -> new ConsC({buf[0]}, c2Chars({buf+1}))

func showC :: (Chars -> ()):
    match ...:
        NilC -> {putchar('\n')}
        ConsC (c,l) :: ({char},Chars) :
            {putchar(c)}
            showC(l)

val cs :: Chars[] = c2Chars({"abc"})
{assert(cs.n == 3)}
showC(c2Chars({"abc"}))
