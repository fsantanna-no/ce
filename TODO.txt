- count number of allocs in "new", cur++
- back to lst1, always test lexer "OK"
- env
    - ce_arg, ce_ret
        - type of ... (requires enclosing func type)
        - return should not generate `return` if enclosing func returns recursive type
- global datas
    - remove datas/conss
- remove
    - pre data declaration
    - SUP_*
    - VA_ARGS
- ambiguity
    - loop / if next line

- types
    - typedefs
    - TODOS em tests
- tuples
    - _1, _2
- pools
    - alter functions that return (and allocate) rec to receive pool
    - alter functions that declare pool to release on returns (and last stmt)
    - TODO:
        - ignoring NULL
        - ignoring nxt: multiple recs in scope
- out: include TK lin/col
- outs
    - oute, outd, outg
- SYNTAX
    - `;` for SEQ
    - `val` optional
        - requires `:=` for `set`
        - also `set` optional
    - optional `=` (use `:`) val mut
        - see all places that can use `:` and make previous tk optional
    - data struct / tuple
        - tuple indexes
        - data names
    - data as Expr ?
        - would remove Glob
- IF
    - if optional else
        - test together with if
    - ifs/if join?
        - use if stmt passing ret
- LEXER
    - \ to continue line
        - or indent to continue
    - accept ' etc only at the end of id
        - also subst by _ on code gen
- MISSING CASES
    - match, ifs, if, >if
        - allow if ret is unit
        - otherwise TS must check for completness
- NEED TYPES
    - ~ be structural not referential
- TODO
    - False/True -> 0/1 (enums)

- valgrind --tool=memcheck --leak-check=full --track-origins=yes ./tests
- val[], new

- list type
    data List:
        Nil  = ()
        Cons = ((), List)
- data/funcoes recursivas
- data
    data Tree:
        Leaf = Int
        Node = (Tree,Tree)

- MATCH

    case ...:
        (~zero, _)  -> zero
        (=x,    =y) -> mul (x,y)

    case ... :
        Nat.Zero -> one
        =n       -> mul(n, fact(dec(n)))

    not = func :
        case ... :
            Bool.False -> Bool.True
            Bool.True  -> Bool.False

    case v:
        Left (=x) :: Nat :
            return f(x)
        Right (=x) :: Nat -> g(x)

    case (x,y):
        (Either.Left =xl,  Either.Left =yl)  :: (a,a) :
            return xl @< yl
        (Either.Left _,    Either.Right _)            :
            return Bool.True
        (Either.Right =xr, Either.Right =yr) :: (b,b) :
            return xr @< yr
        (Either.Right _,   Either.Left  _)           :
            return Bool.False

    case xs:
        List.Nil -> 0
        List.Cons (_,=xs) -> 1 + length(xs) :
            xs :: List of a

    case x:
        ~y   -> 0
        else -> 1

= 04-07 14:03
    4    11    98 ce.c
  356   783  8831 code.c
  169   412  4229 lexer.c
  632  1557 14396 parser.c
  545  1481 15343 tests.c
   12    52   336 code.h
   54   115   860 lexer.h
  193   504  3715 parser.h
 1965  4915 47808 total

///////////////////////////////////////////////////////////////////////////////
